---
alwaysApply: true
---
    }));
    return { success:true as const, items };
  }catch(e:any){ return { success:false as const, error:e.message }; }
}

export async function serperSearch(q:string, gl:string, num=10){
  try{
    const r = await fetch('https://google.serper.dev/search', {
      method:'POST',
      headers:{ 'X-API-KEY':process.env.SERPER_KEY!, 'Content-Type':'application/json' },
      body: JSON.stringify({ q, gl, num })
    });
    if(!r.ok) return { success:false as const, error:`${r.status}` };
    const j = await r.json();
    const items = (j.organic || []).slice(0,num).map((x:any)=>({
      title:x.title, link:x.link, snippet:x.snippet
    }));
    return { success:true as const, items };
  }catch(e:any){ return { success:false as const, error:e.message }; }
}

11.3 Orchestrator (SSE skeleton)

// api/agents/orchestrate.ts
import type { Handler } from '@netlify/functions';
import { orchestrate } from '../../src/agents';

export const handler: Handler = async (event) => {
  if (event.httpMethod !== 'POST') return { statusCode:405, body:'Method Not Allowed' };
  const { search_id, user_id } = JSON.parse(event.body||'{}');
  const headers = {
    'Content-Type':'text/event-stream', 'Cache-Control':'no-cache', Connection:'keep-alive'
  };
  const stream = new ReadableStream({
    async start(controller) {
      const send = (type:string, data:any) =>
        controller.enqueue(`event: ${type}\ndata: ${JSON.stringify(data)}\n\n`);
      try {
        await orchestrate(search_id, user_id, send);
        send('DONE', { ok:true });
      } catch (e:any) {
        send('ERROR', { stage:'orchestrate', message:e.message });
      } finally {
        controller.close();
      }
    }
  });
  // @ts-ignore
  return new Response(stream, { status:200, headers });
};


⸻

12) What Cursor Must Ask Before Coding
	•	Confirm country list → gl mapping additions needed?
	•	Confirm size/revenue placeholders for businesses (we’ll derive simple heuristics if Serper lacks).
	•	Confirm UI step triggers (advance to next page on event type or when count met?).

⸻

Start point for Cursor:
	1.	Create files per the layout.
	2.	Implement tools/clients.ts, tools/serper.ts, tools/country.ts.
	3.	Implement agents/business-persona.agent.ts & agents/dm-persona.agent.ts (DeepSeek).
	4.	Implement agents/business-discovery.agent.ts (Serper Places + bucketing).
	5.	Implement agents/dm-discovery.agent.ts (Serper web + mapping).
	6.	Implement agents/market-research.agent.ts (Gemini).
	7.	Wire api/agents/orchestrate.ts SSE and hooks/useSearchRun.ts.
